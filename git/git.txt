Set the global username and its email for all repositories:
    git config --global user.name "<user _name>"
    git config --global user.email "<user _email>"

Create an empty Git repository or reinitialize an existing one:
    git init

Set the local username and its email (the current local repository uses them first):
    git config user.name "<user _name>"
    git config user.email "<user _email>"

Print the global and local configurations in the configuration files:
    cat ~/.gitconfig
    cat .git/config

Show all configuration (local and global) and their scope:
    git config --global -l

Show all configuration (local and global), their directories and their scope:
    git config -l --show-origin --show-scope

Show the global or local configuration:
    git config --global -l
    git config --local -l

Show the global or local configuration and its directory:
    git config --global -l --show-origin
    git config --local -l --show-origin

Set the default branch name to "master" and the next new repository will use the default branch name "master" (the current default branch name is still "main"):
    git config --global init.defaultBranch master

git cat-file <option> <object>: Output the contents or other properties such as size, type or delta information of one or more objects.
    <object>: The name of the object is expressed by the SHA-1 expressions and all objects are stored under the .git directory, like this:
              .git/objects/3b/18e512dba79e4c8300dd08aeb37f8e728b8dad
              .git/objects/92/b8b694ffb1675e5975148e1121810081dbdffe
              Note that the name of the object includes its parent folder's name,i.e.,
              the names of the object are "3b18e512dba79e4c8300dd08aeb37f8e728b8dad" and "92b8b694ffb1675e5975148e1121810081dbdffe"
              whcih include their parent folders' names "3b" and "92".
              Besides, we don't need to give the full expression, we can just give their names like "3b18" and "92b8" and Git can recognize them.
    -t: Show the object type.
    -s: Show the object size.
    -p: Print the contents of <object> based on its type.

git ls-files -s: Show the staged contents' mode bits, object name and stage number about files in the index and the working tree.

git init <directory>: Create an empty Git repository or reinitialize an existing one in <directory>. 
                      We don't have to create <directory> before executing this command.
                      By default, <directory> is the current directory.

git status: Show the working tree status, where the work tree means a tree structure that contains the .git folder, including all sub directories and files.

git add <pathspec>: Add files to the index (staging area), and Git compresses the content of file and saves it as a blob object.
                    Blob objects represent files stored in the repository, and are named using the SHA1 function along with the file's header and content.
                    The index is a staging area where you can gather changes you intend to include in your next commit. 
                    <pathspec> is used in the git command to limit the scope of operations to some subset of the tree or working tree,
                    such as commits, ORIGINAL_HEAD, etc. in ".git/".

git commit -m <message>: Record changes to the repository and use <message> as the commit message.
                         If multiple -m options are given, their values are concatenated as separate paragraphs.
git commit -a: Automatically stages (adds to the commit) all tracked files that have been modified or deleted, and then commits
git commit --amend --no-edit: Amend the latest commit of the current branch without changing its message.
                              Note that we still need to use "git add" before this command.

git rm <pathspec>: Remove files from the working tree and from the index.
git rm --cached <pathspec>: Removes <pathspec> only from the index, but doesn't remove it from the working tree.                          

git restore <pathspec>: Restore <pathspec> that is in the working tree and hasn't yet been staged to its most recent staged status.
git restore --staged <pathspec>: Removes <pathspec> that has been staged from the index,
                                 but doesn't restore <pathspec> in the working tree (commits created via "git add" wno't be deleted).
git restore --staged --worktree <pathspec>: Removes <pathspec> that has been staged from the index, and restore <pathspec> in the working tree. 

git log: Show the commit logs of the current HEAD and of its ancestry.
         That is, it prints the commit HEAD points to, then its parent, its parent, and so on.
         It traverses back through the repo's ancestry, by recursively looking up each commit's parent.
         Note that press 'q' to exit "git log".
git log -n <number>: Display the last <number> commits.
git log --oneline: Display commit information in a concise one-line format.
                   It can be combined with other options, such as "git log --oneline -n <number>".
git log --after='<date>': Show commits after a specific date (inclusive), where the <date> format is like 2024-01-02.
git log --before='<date>': Show commits after a specific date (exclusive).
git log --stat: Displays summary statistics, including number of files and lines modified etc.
git log --graph: Draw a text-based graphical representation of the commit history on the left hand side of the output.
git log --author=<author_name>: Show commits in which the author entry matches <author_name>. 
git log --grep=<string>: Show commits with a commit message containing <string>.
git log --merges: Show merge commits.


git reflog: Reference logs, or "reflogs", record when the tips of branches and other references were updated in the local repository.
            It doesn't traverse HEAD's ancestry at all. The reflog is an ordered list of the commits that HEAD has pointed to:
            it's undo history for your repo. The reflog isn't part of the repo itself (it's stored separately to the commits themselves) 
            and isn't included in pushes, fetches or clones; it's purely local.

git shortlog: Summarizes "git log" output in a format suitable for inclusion in release announcements. Each commit will be grouped by author and title.
          -n: Show output according to the number of commits per author (in descending order) instead of author alphabetic order.
          -s: Show the number of commits for each author and their name (sort alphabetically by author name).
       -s -n: Show the number of commits for each author and their name (sort by number of commits in descending order).
          -e: Show the email address of each author (sort alphabetically by author name).

git branch: List local branches we have.
git branch <branch_name>: Create a branch with branch_name, if there already have branch with the name you want to create, it will return error.
git branch –d <branch_name>: Delete the branch that must have been fully merged in its upstream branch.
                             The objects (blob, commit, tree, tag) from this branch still exist and won't be deleted.
                             It only deletes .git/refs/<branch> and .git/logs/refs/heads/<branch>.
git branch –D <branch_name>: Delete branch even if it isn't merged, but can't delete current active branch or branch not existing.
git branch –m <old_name> <new_name>: Rename branch with new name.
git branch –a: List all branches both local and remote.
git branch -r: List the remote branches.
git branch -vv: List all local branches tracking information. 
                This command is useful for quickly seeing the status of your branches relative to their remote counterparts.
git branch --merged <branch>: List the local branches that have been merged into <branch>
                              (including branches merged by the parent branch of <branch> before creating <branch>).

git checkout <branch_name>: Change the current active branch to <branch_name> and the head points to the latest commit on this branch.
                            If the branch doesn't exist locally but exists remotely, it will be pulled from the remote repository.
git checkout <commit>: Change the current head pointing to <commit> on the current branch, this head become the detached head.
git checkout <pathspec>: Same as "git restore <pathspec>".
git checkout –b <branch_name>: Checkout a branch, will create that branch if it doesn't exsit.

git diff: Show changes between the current working tree and the index (staging area).
git diff --cached: Show changes between the current repository and the index.

git merge <branch>: Incorporate changes from <branch> into the current branch.
                    If the merge conflict happens, we need to fix the files having conflict merge,
                    and then use "git add <pathspec>" and "git commit" to create a new commit to merge two branches.
                    Note that this time the commit already has the message "Merge branch '<branch>'",
                    and you don't need to add "-m <message>" unless you want to add the extra information.


git rebase <branch>: Git takes the commits from <branch> (e.g. feature, bugfix) and applies them on top of the current base branch
                     (e.g., main or master) as if they were made in sequence, creating a linear history.
                     Unlike "git merge <branch>", which combines the history of <branch> and the current branch.
                     If multiple people develop together, this command will modify the commit history, which can easily cause trouble to others, so we usually don't use this command.

origin: The default remote name on the system for a remote repository.
    origin/<branch>: The local copy of the remote branch.
    origin <branch>: The remote branch in the remote repository.

git remote: Show all remote names.
git remote -v: Display the URL Git uses to read and write the remote name.

git remote show <remote_name>: The detailed information about a specific remote repository, including its branches,
                               the tracking branches, and any configured fetch/push settings (need to connect to internet).
                               It's useful for checking the status and configuration of your remotes.

git remote add <remote_name> <repository_URL>: Set the remote name of the remote repository in the local system,  
                                               so we can use "git push", "git pull", ...etc to operate between local and remote repositories
                                               Usually we set the default remote name "origin" to <remote_name>.
                                               You can use "cat .git/config" to view the remote configuration added to the local repository.
                                               Note that if the remote repository's branch we want to push to doesn't have the upstream,
                                               use "git push -u <remote_name> <branch>" including "-u" for push.
                                               "git push -u <remote_name> <branch>" is usually used to push new branches that the remote doesn't have.

git remote remove <remote_name>: Remove the current remote name.

git clone <repository_URL> <path>: Clone a repository into a new directory.
                                   <path> is the name of a new directory to clone into,
                                   and it can be ignored so that the repository will be cloned to the current path.
git clone <repository_URL> <path> --depth=1: Create a shallow clone with a history truncated to the latest commits,
                                             so "git log" only shows the latest commit.
                                             It's useful to clone a huge repository.

git remote prune <remote_name>: Clean up references (in ".git/refs/remotes") to remote branches that have been deleted from the remote repository.
                                (i.e. remove stale tracking branches in ".git/refs/remotes" that no longer exist on the remote but are still present locally,
                                we can check the stale branches disappeared from "git branch -r").
                                This helps keep the local repository in sync with the remote by removing unnecessary references.
                                Note that this doesn't remove the stale branched locally.

git push <remote_name> <branch>: 1. Push the local <branch> to the remote <branch>, where the local and remote branches are also named <branch>                
                                 2. If the local branch doesn't exist in the remote repository, must use "git push -u <remote_name> <branch>"
                                    to Push the current branch to the remote branch and set the upstream tracking branch to <branch>,
                                    where "-u" can build a relation between the local and remote branches.
                                    If the local branch has tracked the remote one,
                                    we just use "git push" on the currrent branch to push it to the remote without adding "-u <remote_name> <branch>".
                                    If forget add "-u", add "-u" to push again
                                    or use "git branch --set-upstream-to=<upstream>" to set up the current branch tracking <upstream>,
                                    where <upstream> can be <remote>/<branch>. If no <branchname> is specified, then it defaults to the current branch.
                                    (Use "git branch -vv" to check whether build the relation between them when not using '-u' in the first push for the new branch)
                                 3. When <remote_name> and <branch> isn't specified, "branch.<branch_name>.remote" configuration 
                                    ("git config -l") for the current branch will be referenced to determine where to push. 
                                    And if the configuration is missing, it defaults to "origin".
                                 4. Note that the push will be rejected if the local branch falls behind the remote one.
                            -u: "-u" means "upstream" that refers to the remote branch that your local branch is tracking,
                                and it sets the remote <branch> as the upstream for the current local branch
                                (i.e. "-u" means that the local branch tracks the remote one).
                                So if the remote repository's branch we want to push to doesn't have the upstream,
                                use "git push -u <remote_name> <branch>" including "-u" for push.
                                "git push -u <remote_name> <branch>" is usually used to push new branches that the remote doesn't have.

git push -d <remote_name> <branch>:
git push <remote_name> -d <branch>: Delete the remote branch locally.
                                   (use "git branch -vv" or "git branch -a" to check whether the remote branch is still there after deleting)                                

git push <remote_name> <tag>: Push tag to remote
git push <remote_name> --tags: Push multiple tags simultaneously.

git push -d <remote_name> <tag>: 
git push <remote_name> -d <tag>: Delete remote tag.

git tag: List all tags.

git tag <tag>: Creates a Lightweight tag  for the latest commit on the current branch,
                    but doesn't create a tag object.
                    Note that lightweight tags are actually the commit object
                    (check by "cat .git/refs/tags/<tag> | xargs git cat-file -p").
git tag -a <tag> -m "<tag_message>": For the latest commit on the current branch,
                                     creates annotated tag that have the message with the associated meta-data(like email, date, etc.),
                                     and creates a tag object in ".git/objects" which contains the tag message and meta-data.
                                     Note that annotated tags are the tag object (check by "cat .git/refs/tags/<tag> | xargs git cat-file -p").
git tag -a <tag name> <commit_SHA1_value> -m "<tag_message>": Create a annotated tag for an older commit.

git tag -d <tag>: Delete tag, but tag object aren't deleted.

git fetch [repository]: 1. download objects and refs from remote repository from a remote repository 
                           to your local repository without merging them into your current branch.
                           It lets you see what others have been working on without altering your local work.
                           The logs of the local repository don't change, and we can't see "<remote_name>/<bahch>"
                           and "<remote_name> <bahch>" in the "git log" because they are ahead of the local HEAD.
                        2. [repository] can be <remote_name>, <remote_name>/<branch> or URL.
                           When no [repository] is specified, by default <remote_name> is "origin" and <branch> is the current branch.
                        3. Execute this commant on the current branch,
                           and the first line of ".git/FETCH_HEAD" will be this branch's remote one and its latest commit.
                           After "git merge", the previous commit will be stored in ".git/ORIGIN_HEAD",
                           so we can use "git reset --hard ORIGIN_HEAD" to rollback the previous commit before "git fetch".
                        4. If we delete the branch of the remote repository and then use this command,
                           this branch in the local repository will be stale (using"git remote show <remote_name>"),but isn't deleted.
                           We can delete this branch locally by adding "--prune" to this command
                           or using "git remote prune <remote_name> <branch>" after this command.
                        5. Sync tags from remot. However, if the tags were deleted remotely,
                           this command wouldn't deletled the stale tags for sync, so we need to delete them manually.
               --prune: If we delete the branch of the remote repository,
                        this option can remove any remote-tracking references that no longer exist on the remote when getching.
                    -v: Show the detailed information during the fetch process.
git merge <remote_name>/<branch>: Merge the local branch with the remote for update, if the remote branch is ahead of the loacl one.

git pull [repository]: 1. Fetch from and merge the remote branch into the current one (i.e. git pull = git fetch + git merge).
                          Because it execute "git fetch" first, the first line of ".git/FETCH_HEAD" will be this branch's remote one and its latest commit 
                          Then merge the current branch with its branch's remote one(i.e. the first line of ".git/FETCH_HEAD").
                          Before merge, Git sends the POST message (git-upload-pack) to the remote,
                          and compares with the local branch to decide where should be updated.
                          If the merge confilct will happen, add "--no-rebase" to this command to avoid errors.
                          Then fix the conflict, and finally use "git add <pathspec>" and "git commit"
                          (or "git commit -a" to skip "git add <pathspec>") for commit.
                       2. When no [repository] is specified,
                          the default of [repository] for "<remote_name>/<branch>" is "branch.<branch_name>.remote"
                          and "branch.<branch_name>.merge" in "git config -l", where <branch> is the current branch.
                       3. If the current branch is behind the remote,
                          then by default it will fast-forward the current branch to match the remote. 
                          And if the current branch and the remote have diverged,
                          specify "--no-rebase" to reconcile the divergent branches.
                       4. If you are not sure that merge will conflict, first use "git fetch <remote_name>/<branch>",
                          then use "git diff <remote_name>/<branch>" to check the differences, and then use "git merge <remote_name>/<branch>".
                          If you are sure there will be no conflicts (that is, fast-forward, 3-way merge),
                          use git pull, which is faster.
                   -v: Show the detailed information during the pull process.
          --no-rebase: Eensure that when pulling changes from a remote repository,
                       Git will use a merge to integrate the updates instead of rebasing thelocal commits on top of the incoming commits.
                       In short, it avoids rebasing and merges the changes directly.

git reset <pathspec>: Reset current HEAD to the specified state. <pathspec> can be commits, ORIGIN_HEAD etc.
                      It can move the current branch to a different commitand optionally modify the index (staging area)
                      and working directory depending on the options used (--soft, --mixed, or --hard).
              --soft: Move the HEAD to a specified commit without altering the working directory or the index.
                      It effectively undoes commits, but leaves the files in the index as they were.
                      This allows you to recommit changes if needed.
              --hard: Reset the working directory and the index to the specified commit, discarding all changes.
                      This means any uncommitted changes in tracked files will be lost. Use it with caution as it cannot be undone easily.
             --mixed: This is the default action. Reset the index but not the working tree 
                      (i.e., the changed files are preserved but not marked for commit or not added to the index)
                      and report what has not been updated.

git show-ref: List the latest commits for all local and remote branches and which commit HEAD is pointing to.
              We can know which branches are currently in the same commit
              (use "git fetch" to ensure the loacl and remote branches are in sync).
              Add <branch> to see the latest commits for the specific local and remote <branch>.

Clean up the remote and local branches --------------------------------------------------------------------------------------
Delete the local branch that has been merged into "master":
    git branch --merged master | grep -v "master" | xargs git branch -d
"git branch --merged master" lists branches that have been merged into "master".
'grep -v "master"' excludes the "master" branch.
"xargs git branch -d" deletes the branches excluding "master".

Delete the local branch that has been merged into "master", 
and delete the branches in ".git/refs/remotes" whcih has been removed in the remote repository:
    git branch --merged master | grep -v "master" | xargs git branch -d && git remote prune origin
"git remote prune origin" deletes the branches in ".git/refs/remotes" which has been removed in the remote repository
(we can check whether the branches are deleted using "git branch -r").

Delete the remote branches that has been merged into master (it will delete the branched in the repository and be careful to use it):
    git branch --remote  --merged master | grep -v "master" | sed 's/origin\///' | xargs git push origin -d 
"sed 's/origin\///'" gives the remaining remote branches which have "/origin" substring.
"xargs git push origin -d" deletes these remote branches in the remote repository.

Sync the local master branch with the master branch of the original repository we forked -----------------------
We forked a repository created by other for development, but the original owner may push new commits,
and our local repository will fall behind the original repository.
In this case, we need to sync our local repository with the original repository.
First, configure a remote for the original repository, where <upstream> is the remote name representing the original repository 
(Use "git remote -v" to check if <upstream> is added to the local repository):
    1. git remote add <upstream> https://github.com/<original_owner>/<original_repository>.git
And sync the local master branch with the original one:
    2. git fetch <upstream>
    3. git merge <upstream>/master
    (Or just use "git pull <upstream>/master")
The local master branch and the original repository are in sync, and we finally push it to our remote repository.
So the our local and remote repositories sync with the original repository:
    4. git push origin master

Git SSH key -----------------------------------------------------------------------------------------------
Generate the SSH key pairs, and we can provide a key comment (which will be appended at the end of the public key) with "-C":
    ssh-keygen -C '<comment>'
We will be asked to set <key_name> and passphrase, we don't have to set it (just press the "Enter" btton).
Then specify the directory of the key pair, and we usually save it in "~/.ssh/<key_name>",
But we must exactly specify '~' which is "/home/lin" in this Linux system,
so the key pair is stored in "/home/lin/.ssh/<keyname>".

Check the SSH key pairs (public keys have the file extenion ".pub"):
    ls ~/.ssh

It is best to set the ssh key pairs for different platforms.
By default, "git clone" chooses the local private key named "id_rsa" for the remote repository.
So we need to create the "config" file in "~/.ssh" so that each platforms can find their corresponding private key.
The format to set <key_name> to GitHub in "~/.ssh/config" can be:
    HOST github.com
    IdentityFile /home/lin/.ssh/<key_name>
    User <username>
By default, SSH keys are stored in "~/.ssh", where "~" is "/home/lin" in this system.

Change the connection ("git clone") between local and remote repositories from Https to SSH.
In the ".git/config", find the remote repository we want to change the connection
from Https:    url=https://github.com/<github_username>/<reopository>
to SSH:        url=git@github.com:<github_username>/<reopository>.git

Git pack-----------------------------------------------------------------------------------------------
The initial format in which Git saves objects on disk is called a loose (one object per file) object format.
In order to save space and be more efficient, Git packs up several loose objects into a single binary file called a packfile,
with an index file. Git does this if we have too many loose objects around, if we run "git gc",or if we push to a remote server. 
When Git packs objects, it looks for files that are named and sized similarly,
and stores just the deltas (offsets) from one version of the file to the next. 
The packfile is a single file containing the contents of all the objects that were removed from your filesystem.
The index is a file that contains deltas into that packfile so you can quickly seek to a specific object.
Note that even two packfiles contain the same objects, their names may be different.

git gc: Cleanup unnecessary files and optimize the local repository, such as compressing file revisions,
        removing unreachable objects which may have been created from prior invocations of git add, or stale working trees.

git verify-pack -v .git/objects/pack/pack-<sha1_number>.idx: Read given .idx file for packed Git archive created 
                                                             and verify the .idx file and the corresponding pack file.
                                                             "-v" shows the list of objects contained in the pack
                                                             and a histogram of delta chain length after verifying the pack,
                                                             to see what was packed up.

git unpack-objects < <parent_path>/pack-<sha1_number>.pack: Unpack objects from a packfile to expand the objects contained within
                                                            and write them into the repository in loose format.
                                                            The packfile to be unpacked can't exist in ".git/objects/pack",
                                                            otherwise nothing will be unpacked.
                                                            So we should move this packfile to other path first 
                                                            using "mv .git/objects/pack/pack-<sha1_number>.pack <parent_path>/pack-<sha1_number>.pack",
                                                            and specify its new path to "git unpack-objects <".

git prune: Prune all unreachable objects from the object database.
       -n: Do not remove anything; just report what it would remove.

git fsck: Check the connectivity and validity of objects in the git repository.
          Users can confirm the integrity of the files in their repository and identify any corrupted objects.
          It will also inform the user if there are any dangling objects in the repository.
          These objects may be taking up unnecessary space in the repository and can be removed by running "git gc".

If we have huge objects and we don't need them, but we can't remove them,
for example: Objects related to deleted branch can't be removed.
The following command can remove unused objects from a git repository:
    git -c gc.reflogExpire=0 -c gc.reflogExpireUnreachable=0 -c gc.rerereresolved=0 -c gc.rerereunresolved=0 -c gc.pruneExpire=now gc "$@"
This will remove all unreferenced things, so be careful to use it.

Clone the specific tag of the repository -------------------------------------------------------------------------------------------
1. Initialize the repository:
        git init

2. Add the URL of the remote repository you want to colne:
        git remote add <URL>

3a. Fetech the specific tag of the repository, which includes all history before this tag:
        git fetch [repository] [tag]

3b. Fetech the specific tag of the repository, which only includes the latest commit:
        git -c protocol.version=2 fetch [repository] [tag] --depth=1
    But the master branch is still empty, we need to change the branch:
        git checkout FETCH_HEAD
    Now we are in the branch whose name is the latest commit hash number.

Switch user automatically -------------------------------------------------------------------------------------------
When working on a private or company project, you need to switch users,
otherwise personal or company information will be leaked.

1. Create new git configuration file in "~/.<new_gitconfig>/"
   containing new user data whose format is similar to "~/.gitconfig":
        [user]
            name = <new_username>
            email = <new_email>
    "~/.<new_gitconfig>" is the new git configuration file containg new user data (the same path as ".gitconfig").

2. Open "~/.gifconfig" to insert the following part to let Git know where the new git configuration file is
   so Git can automatically use this file to apply the new user in the directory we want:
        [includeif "gitdir:<directory_using_new_gitconfig>"]
            path = ~/.<new_gitconfig>/
   <directory_using_new_gitconfig> is the directory where we want to use the new user for the repositories there.
   And set the path of the new git configuration file to "~/.<new_gitconfig>/".
   
We can go to <directory_using_new_gitconfig> to create a new repository and commit,
so we can check the new repository there if it uses new user.
Or go to <directory_using_new_gitconfig> and use the following command to check if the new user is used there:
        git config user.name
        git config user.email

Alias -------------------------------------------------------------------------------------------
We can set aliases to shorten commands.

Method 1:
    Linux alias:
        alias <command_alias>="<git_command>"
    For example, show all git configuration (local and global), their directories and their scope:
        alias gitconfig="git config -l --show-origin --show-scope"
    So we just excute the alias of that command:
        gitconfig

Method 2:
    Git alias:
        git config --global alias.<command_alias> "<git_command_wiout_git>"
    Note that <git_command_wiout_git> don't need the "git" part in itself.
    So we just excute the alias of that command:
        git <command_alias>
    And we can go to "~/.gitconfig" to view the aliases we set.

We can also use "shell scripts" to set alias in "~/.gitconfig", which can combine several commands into one.
For example:
    cp = !sh -c 'git add . && git commit --amend --no-edit && git push origin $(git rev-parse --abbrev-ref HEAD) --force' -
"$(git rev-parse --abbrev-ref HEAD)" means the current branch.
It combine three commands: "git add .", "git commit --amend --no-edit", "git push origin --force".

-------------------------------------------------------------------------------------------

