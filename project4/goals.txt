5. Pagination
   在任何顯示貼文的頁面上，每個頁面上只能顯示 10 個貼文。
   貼文超過十個，則出現Next按鈕，將用戶帶到下一頁(下一頁的貼文要比較舊)，若不在第一頁上，則Previous按鈕，將用戶帶到上一頁。
   使用Django的Paginator class有助於在後端(Python)實現分頁 
   https://docs.djangoproject.com/en/5.0/topics/pagination/
   使用Bootstrap的Pagination有助於在前端(HTML)顯示頁面
   https://getbootstrap.com/docs/4.4/components/pagination/
   https://getbootstrap.com/docs/5.3/components/pagination/

7. Like and Unlike
   用戶能點擊任何貼文上的按鈕或連結來切換他們是否Like該貼文。
   用JS非同步地讓伺服器更新Like數(透過fetch)，而不需重新載入頁面來更新貼文的Like數(參考emailbox中的route怎麼用fetch)
   https://codepen.io/mateusz800/pen/OJPZXMa
   https://codepen.io/LUCASHD/pen/RwpXoWo

----------------------------------------------------------------------------------------

1. New Post: 
   登入者能在textarea寫字並以button送出貼文(可參考在本專案說明頁面頂部的圖片如何設計)

2. All Posts (JS)
   導覽列的All Posts可導向到顯示所有人的的貼文(從最近的貼文開始)
   每則貼文包括張貼者的名稱,內容,張貼日期與時間,多少人按like(可用愛心或讚表示)

3. Profile Page 
   按username會載入使用者個人頁面，需包括:
   用戶所有貼文(從最近的貼文開始)
   用戶有多少個follower與follow多少人
   對以登入的用戶，此頁面還應顯示follow或unfollow按鈕讓用戶切換是否追蹤其他用戶的貼文(自己不可follow自己)

4. Following -> watchilist
   導覽列的Following將用戶帶到一個頁面，顯示用戶所追蹤其他人的所有貼文(只有登入的用戶可用)
   此頁面像All Posts頁面一樣，包含有限的貼文集


6. Edit Post (JS)
   用戶能夠點擊自己的貼文上的Edit按鈕來編輯該貼文。
   當點擊Edit時，其貼文內容替換為textarea，用戶能編輯其貼文的內容。
   用戶能Save編輯後的貼文，要用JS而無需重新載入整個頁面
   為了安全起見，確保應用程式的設計使得用戶無法透過任何途徑編輯其他用戶的貼文。


用戶可留言